from PyInstaller.utils.hooks import collect_data_files
import spacy

# add datas for spacy
datas = collect_data_files('spacy', False)

# append spacies data path
datas.append((spacy.util.get_data_path(),'spacy/data'))

hiddenimports=['blis',
'blis.py',
'cymem',
'cymem.cymem',
'cytoolz',
'cytoolz._signatures',
'cytoolz.utils',
'dill',
'murmurhash',
'murmurhash.mrmr',
'preshed',
'preshed.maps',
'spacy._align',
'spacy.about',
'spacy.attrs',
'spacy.cli._schemas',
'spacy.cli.convert',
'spacy.cli.converters.conll_ner2json',
'spacy.cli.converters.conllu2json',
'spacy.cli.converters.iob2json',
'spacy.cli.converters.jsonl2json',
'spacy.cli.evaluate',
'spacy.cli.info',
'spacy.cli.init_model',
'spacy.cli.link',
'spacy.cli.package',
'spacy.cli.pretrain',
'spacy.cli.profile',
'spacy.cli.train',
'spacy.cli.validate',
'spacy.compat',
'spacy.displacy.render',
'spacy.displacy.templates',
'spacy.errors',
'spacy.glossary',
'spacy.gold',
'spacy.kb',
'spacy.lang',
'spacy.lang.en',
'spacy.language',
'spacy.lemmatizer',
'spacy.lexeme',
'spacy.lookups',
'spacy.matcher._schemas',
'spacy.matcher.dependencymatcher',
'spacy.matcher.matcher',
'spacy.matcher.phrasematcher',
'spacy.morphology',
'spacy.parts_of_speech',
'spacy.pipeline.entityruler',
'spacy.pipeline.functions',
'spacy.pipeline.hooks',
'spacy.pipeline.morphologizer',
'spacy.pipeline.pipes',
'spacy.scorer',
'spacy.strings',
'spacy.symbols',
'spacy.syntax',
'spacy.syntax._beam_utils',
'spacy.syntax._parser_model',
'spacy.syntax._state',
'spacy.syntax.arc_eager',
'spacy.syntax.ner',
'spacy.syntax.nn_parser',
'spacy.syntax.nonproj',
'spacy.syntax.stateclass',
'spacy.syntax.transition_system',
'spacy.tokenizer',
'spacy.tokens',
'spacy.tokens._retokenize',
'spacy.tokens._serialize',
'spacy.tokens.doc',
'spacy.tokens.morphanalysis',
'spacy.tokens.span',
'spacy.tokens.token',
'spacy.tokens.underscore',
'spacy.util',
'spacy.vectors',
'spacy.vocab',
'srsly.msgpack.util',
'thinc',
'thinc.extra.search',
'thinc.linalg',
'thinc.neural',
'thinc.neural._aligned_alloc',
'thinc.neural._classes.difference',
]